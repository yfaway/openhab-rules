/**
 * Triggerred when the front or garage door is opened.  Computes a specified
 * route and sends an alert if it is different from the typical route the
 * user travels.
 * A route profile is specified in the label of a String item. From there, a
 * series of configured values is read from the transform file routes.map. 
 * The logic to determine whether a route should be computed and whether an
 * alert should be sent out is based on those values.
 * E.g.: for this item
 *   String VT_Route_User1Work "user1Work" (gRoute)
 * there should be the following values in routes.map (note the prefix)
 *    user1WorkAddress=an address
 *    user1WorkTimeRange=7:30 - 8:00
 *    user1WorkTypicalRouteKeywords=Main, Steel, Huntvill, 401
 *    user1WorkEmailAddress=my@email.com
 */
import java.net.URLEncoder
import java.util.Arrays

val LOGGER_NAME = "Routes"

/**
 * The transform file containing settings for each route profile.
 */
val PROPERTIES_FILE = "routes.map"

/**
 * The duration between alerts.
 */
val ALERT_INTERVAL_IN_MINUTES = 5

val TIME_RANGE_ERROR_MESSAGE = "Error: TimeRange must be in 24-hour format hh:mm - hh:mm; got "

var long lastCheckTimeStamp = 0

rule "Retrieve route info"
when
  Item FF_Porch_Door changed to ON or
  Item FF_Foyer_Door changed to ON
then

  // Bail out early if we just request a route recently.
  val long durationInMillis = ALERT_INTERVAL_IN_MINUTES * 60 * 1000
  if ((now.getMillis() - lastCheckTimeStamp) <= durationInMillis) {
    return
  }

  lastCheckTimeStamp = now.getMillis()

  gRoute.members.forEach[ r |
    val prefix = r.label

    val timeRange = transform("MAP", PROPERTIES_FILE, prefix + "TimeRange")
    val timeTokens = timeRange.split("-")
    if ( 2 != timeTokens.length ) {
      logError(LOGGER_NAME, TIME_RANGE_ERROR_MESSAGE + timeRange)
      return
    }

    val startFields = timeTokens.get(0).split(":")
    if ( 2 != startFields.length ) {
      logError(LOGGER_NAME, TIME_RANGE_ERROR_MESSAGE + timeRange)
      return
    }

    val endFields = timeTokens.get(1).split(":")
    if ( 2 != endFields.length ) {
      logError(LOGGER_NAME, TIME_RANGE_ERROR_MESSAGE + timeRange)
      return
    }

    val startTime = now.toLocalTime()
        .withHourOfDay(Integer.parseInt(startFields.get(0).trim()))
        .withMinuteOfHour(Integer.parseInt(startFields.get(1).trim()))
    val endTime = now.toLocalTime()
        .withHourOfDay(Integer.parseInt(endFields.get(0).trim()))
        .withMinuteOfHour(Integer.parseInt(endFields.get(1).trim()))

    val localTime = now.toLocalTime()

    if ( ! localTime.isAfter(startTime) || ! localTime.isBefore(endTime) ) {
      logInfo(LOGGER_NAME, "Skipped; current time is outside time range for profile " + prefix)
      return
    }

    val apiKey = transform("MAP", PROPERTIES_FILE, "apiKey")
    val origin = URLEncoder.encode(
        transform("MAP", PROPERTIES_FILE, "homeAddress"), "UTF-8")

    val destination = URLEncoder.encode(
        transform("MAP", PROPERTIES_FILE, prefix + "Address"), "UTF-8")

    val url = "https://maps.googleapis.com/maps/api/directions/json?" + 
        "origin=" + origin + 
        "&destination=" + destination + 
        "&departure_time=now" +
        "&key=" + apiKey
    var data = sendHttpGetRequest(url)

    val status = transform("JSONPATH", "$.status", data)
    if ( "OK" != status ) {
      logError(LOGGER_NAME, 
          "Error: Failed to retrieve route for profile " + prefix + ": " + status)
      return
    }

    val distanceString = transform("JSONPATH", "$..legs[0].distance.text", data)
    val duration = transform("JSONPATH", "$..legs[0].duration.text", data)
    var String instructions = ""

    val int stepCount = Integer.parseInt(transform("JSONPATH", "$..legs[0].steps.length()", data))
    for (var int i = 0; i < stepCount; i++) {
      val expression = "$..legs[0].steps[" + i + "].html_instructions"
      val instruction = transform("JSONPATH", expression, data)

      if ( i > 0 ) {
        instructions += "\n"
      }
      instructions += "  - " + instruction.replaceAll("\\<.*?>","") // remove html tags
    }

    val lowerCaseInstructions = instructions.toLowerCase()
    val keywordsString = transform("MAP", PROPERTIES_FILE, prefix + "TypicalRouteKeywords")
    val keywords = keywordsString.split("\\s*,\\s*")

    val keyWordNotFound = Arrays.stream(keywords).map[ k | k.trim().toLowerCase() ]
      .filter[ k | ! lowerCaseInstructions.contains(k) ]
      .findAny();

    if (! keyWordNotFound.isPresent()) {
      logInfo(LOGGER_NAME, 
          "The current route is the same for profile " + prefix + " -> not sending an alert.")
    }
    else {

      val emailAddresses = transform("MAP", PROPERTIES_FILE, prefix + "EmailAddress")
      if (null === emailAddresses || emailAddresses.isEmpty() ) {
        logError(LOGGER_NAME, 
          "Error: Must specify email address for profile " + prefix)
        return
      }

      var body = "Distance: " + distanceString + "\n" +
          "Duration: " + duration + "\n" + 
          "Instructions:\n" + instructions

      var msg = "{"
      msg += "\"emailAddresses\":\"" + emailAddresses + "\""
      msg += ",\"subject\":\"Revised travel route\""
      msg += ",\"body\":\"" + body + "\""
      msg += ",\"module\":\"" + prefix + "\""
      msg += ",\"intervalBetweenAlertsInMinutes\":" + ALERT_INTERVAL_IN_MINUTES
      msg += "}"

      VT_AlertSender.postUpdate(msg)
    }
  ]
end
