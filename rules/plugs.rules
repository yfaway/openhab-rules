/**
 * Automatically turn on/off smart plugs based on the security arm mode,
 * the vacation settings, and the hours.
 * If the light of the room the plug is located in is still on, do not turn off.
 * If a plug has power reading, won't turn it off unless the wattage is below
 * the threshold. This is to prevent damage to an appliance (e.g. a computer).
 * An alert email will be sent out instead.
 *
 * Dependencies: VT_In_Vacation, VT_Time_LightOn, DSC binding for security system.
 */
import java.util.HashMap

/**
 * The power threshold in a smart plug to indicate that an application is
 * stil running.
 */
val ACTIVE_APPLIANCE_WATTAGE_THRESHOLD = 50

/**
 * Map from item name to wattage.
 */
var HashMap<String, Float> lastPowerValues = newHashMap()

rule "Turn off plugs when security system is armed."
when
  Item PARTITION1_ARM_MODE changed to 1 or
  Item VT_In_Vacation changed to ON or
  Time cron "0 0 23 1/1 * ? *" or
  Time cron "0 30 23 1/1 * ? *" or
  Time cron "0 0 0 1/1 * ? *" or
  Time cron "0 30 0 1/1 * ? *" or
  Time cron "0 0 1 1/1 * ? *" or
  Time cron "0 30 1 1/1 * ? *"
then
  val offPlugs = gPlug.members.filter[ p | OFF != p.state ]

  offPlugs.forEach [ p | 
    // if the room's light is on, the don't turn of the plug
    val lightItemName = p.name.substring(0, p.name.lastIndexOf("_")) + "_LightSwitch"
    val lightItem = gLightSwitch.members.findFirst[ p | lightItemName == p.name ]
    if ( null !== lightItem && ON == lightItem.state ) {
      return
    }

    val powerItemName = p.name + "_Power"
    val powerItem = gPlugPower.members.findFirst[ p | powerItemName == p.name ]
    if ( null !== powerItem ) {
      val wattage = (powerItem.state as DecimalType).floatValue()

      if ( ACTIVE_APPLIANCE_WATTAGE_THRESHOLD < wattage ) {
        val subject = "[" + p.label + "] NOT turning off plug; an appliance is still on"
        var msg = "{"
        msg += "\"subject\":\"" + subject + "\""
        msg += "}"
        VT_AlertSender.postUpdate(msg)

        return
      } // else wattage is below threshold --> deemed safe to turn off.
    } // else plug has no energy reading.

    p.sendCommand(OFF)
  ]
end

rule "Turn on plugs when security system is disarmed."
when
  Item PARTITION1_ARM_MODE changed from 1 to 0 or
  Time cron "0 10 7 1/1 * ? *"
then
  if ( ON == VT_In_Vacation.state ) {
    return
  }

  gPlug.members.forEach[ p |
    if ( ON != p.state ) {
      p.sendCommand(ON)
    }
  ]
end

rule "Turn on/off light when power wattage change"
when
  Member of gPlugPower changed
then
  val Float lastWattageFloat = lastPowerValues.get(triggeringItem.name)
  var float lastWattage
  if (null !== lastWattageFloat) {
    lastWattage = lastWattageFloat.floatValue()
  }
  else {
    lastWattage = 0
  }
  val currentWattage = (triggeringItem.state as DecimalType).floatValue()

  lastPowerValues.put(triggeringItem.name, currentWattage)

  val idx = triggeringItem.name.lastIndexOf("_Plug_Power")
  val lightName = triggeringItem.name.substring(0, idx) + "_LightSwitch"
  val lightItem = gLightSwitch.members.findFirst[ l | l.name == lightName ]

  if ( lastWattage < ACTIVE_APPLIANCE_WATTAGE_THRESHOLD 
          && currentWattage > ACTIVE_APPLIANCE_WATTAGE_THRESHOLD ) {
    if ( null !== lightItem && ON == VT_Time_LightOn.state && ON != lightItem.state ) {
      lightItem.sendCommand(ON)
    }
  }
  else if ( lastWattage > ACTIVE_APPLIANCE_WATTAGE_THRESHOLD 
          && currentWattage < ACTIVE_APPLIANCE_WATTAGE_THRESHOLD ) {
    if ( null !== lightItem && ON == lightItem.state ) {
      lightItem.sendCommand(OFF)
    }
  }
end
