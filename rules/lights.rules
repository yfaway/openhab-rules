/**
 * Generic rules to turn on/off the lights using a timer and one or more
 * triggering events (typically motion sensor or door tripped).
 *   - By default, only turn on the light if it is evening time (based on the
 *     sunset time from the Astro binding).
 *   - Support an optional Number item for the illuminance value; turn on the
 *     light if it is below a illuminance LUX threshold, even if it is not
 *     evening.
 *   - Support an optional item to disable motion sensor from turning on a 
 *     light but still use the motion sensor event to keep the light on. This
 *     is for the scenario where a shared motion sensor is associated with
 *     multiple lights, but we only need to turn on a light at a time.
 *     E.g. the great room and kitchen share the same motion sensor. That 
 *     sensor needs to update the timer for both lights, but must not turn on
 *     the office light.
 *   - Support an optional item to disable motion sensor from turning on a
 *     light if an associated light is already on.
 *     E.g. the great room and kitchen share an open space, if a light is
 *     already on, then a motion sensor event should not turn on the other light.
 *   - Support an optional String item that contains the light switch to turn
 *     off when this light switch is turn on. 
 *     E.g. when office light is turned on, turn off foyer light.
 *   - Ignore the motion sensor event if a wall switch was just turned off.
 *     This prevents the light/fan from turning on again when a user manually
 *     turns it off and moving a way from the area. If not ignored, the motion
 *     sensor might trigger the switch to turn on again.
 *  
 * The timers are not enabled if the system is in vacation mode when the lights
 * are turned on/off randomly to simulate owner presence (thief prevention).
 *
 * Dependencies:
 *   - time-of-day.rules for calculation of day periods.
 *   - presence.rules for VT_In_Vacation setting.
 */

import java.util.HashMap

val LOGGER_NAME = "Lights"
val Object switchLock = new Object()
val Object timerLock = new Object()

/**
 * The period of time in seconds (from the last timestamp a switch was turned
 * off) to ignore the ON command trigged by the motion sensor. This takes care
 * of the scenario when the user manually turns off a light, but that physical
 * spot is covered by a motion sensor, which immediately turns on the light
 * again.
 */
val DELAY_AFTER_LAST_OFF_TIME_IN_MS = 8000 // 8 secs

/**
 * The light level threshold; if it is below this value, turn on the light.
 */
val ILLUMINANCE_THRESHOLD_IN_LUX = 8

/**
 * This Item tag indicates that the switch shares a motion sensor with one
 * or more other switches. These switches then share the same
 * DELAY_AFTER_LAST_OFF_TIME_IN_MS value. I.e. if a switch is just turned
 * off, for the next couple seconds any motion sensor triggering will do
 * nothing. This is because the user is getting out of the zone, and thus it
 * is wrong to turn on another light.
 */
val TAG_SHARED_MOTION_SENSOR = "shared-motion-sensor"

var HashMap<String, Long> lastOffTimes = newHashMap()

val Functions$Function1<GenericItem, Boolean> isSwitchOn = [ switchItem |
    ON == switchItem.state 
          || (switchItem instanceof DimmerItem && switchItem.state > 0)
]

rule "Update light states" 
when
  System started 
then
  FF_Foyer_LightSwitch_MotionSensor.sendCommand(OFF)
end

rule "Update light-on time" 
when
  System started or
  Item VT_Time_Of_Day changed
then
  if (VT_Time_Of_Day.state == "EVENING" 
        || VT_Time_Of_Day.state == "NIGHT"
        || VT_Time_Of_Day.state == "BED" ) {
    VT_Time_LightOn.sendCommand(ON)
  }
  else {
    VT_Time_LightOn.sendCommand(OFF)
  }
end

rule "Turn on light when motion sensor triggered"
when
 Member of gWallSwitchMotionSensor changed to ON
then
  synchronized(switchLock) {
    val localIdx = triggeringItem.name.lastIndexOf("_")
    val switchName = triggeringItem.name.substring(0, localIdx)

    val switchItem = gWallSwitch.members.findFirst[ t | t.name == switchName ]
    if ( null === switchItem ) {
      return
    }

    if ( ON != switchItem.state ) {
      // Is this a fan switch?
      val isFanSwitch = switchName.endsWith("FanSwitch")

      // This check needs to be here rather than in the outter scope because
      // the user might have turned on the light before the programmed 
      // light on time. In such case, we continue to maintain the timer.
      if (ON != VT_Time_LightOn.state && ! isFanSwitch ) {
        // check if there is a valid illuminance value
        val illuminanceName = switchName + "_Illuminance"
        val illuminanceItem = gIlluminance.members.findFirst[ 
          t | t.name == illuminanceName  
        ]

        if ( null === illuminanceItem ) {
          return
        }
        else {
          val value = illuminanceItem.state as Number
          if ( null === value ) { // value not available yet
            return
          }
          else {
            val int intValue = value.intValue
            if ( intValue > ILLUMINANCE_THRESHOLD_IN_LUX ) {
              return
            }
            // else pass through to turn on the light
          }
        }
      }
      
      // If a wall switch was just turned off, ignore the motion sensor event.
      if ( lastOffTimes.containsKey(switchItem.name) ) {
        val long timestamp = lastOffTimes.get(switchItem.name)
        if (now.getMillis() - timestamp <= DELAY_AFTER_LAST_OFF_TIME_IN_MS) {
          return
        }
      }

      // An open area might have multiple lights with a shared motion sensor
      // (e.g. in the security system motion sensor where the motion sensor
      // tends to be in a corner and cover the whole lobby). In this case, we
      // only want to trigger a single light if all lights were off. However,
      // if any light is already on, we still want to renew the timer to keep
      // the light on.
      //
      // Check to see if the motion sensor is allowed to trigger the light.
      val disableAlwaysItemName = triggeringItem.name + "_DisableTriggeringAlways"
      val disableTriggeringAlwaysItem = gMotionSensorDisableTriggeringAlways.members.findFirst[ 
          t | t.name == disableAlwaysItemName 
      ]
      if (null !== disableTriggeringAlwaysItem 
            && ON == disableTriggeringAlwaysItem.state) {
        return
      }

      // Check to see if there is a dependent relationship between lights.
      // I.e. if light B is already on, then don't turn on light A if its
      // motion sensor is triggered.
      val disableIfItemName = triggeringItem.name + "_DisableTriggeringIf"
      val disableTriggeringIfItem = gMotionSensorDisableTriggeringIf.members.findFirst[ 
          t | t.name == disableIfItemName 
      ]
      if (null !== disableTriggeringIfItem
          && null !== disableTriggeringIfItem.state) {
        // see if the other light is on
        val theOtherLight = gWallSwitch.members.findFirst[ 
            t | t.name == disableTriggeringIfItem.state.toString ]

        if ( isSwitchOn.apply(theOtherLight) ) { 
          return
        }
        else if ( switchItem.hasTag(TAG_SHARED_MOTION_SENSOR) ) {
          // If it was just turned off, then don't trigger this light yet.
          // This might be the case that the user is getting out of this zone
          if ( lastOffTimes.containsKey(theOtherLight.name) ) {
            val long timestamp = lastOffTimes.get(theOtherLight.name)
            if (now.getMillis() - timestamp <= DELAY_AFTER_LAST_OFF_TIME_IN_MS) {
              return
            }
          } // has OFF timestamp
        } // the other light is of
        // else - pass through
      }

      switchItem.sendCommand(ON)
    }
    else { // renew timer
      val timerName = switchName + "_Timer"
      val timerItem = gWallSwitchTimer.members.findFirst[ t | t.name == timerName ]
      if ( null !== timerItem ) {
        timerItem.sendCommand(ON)
      }
    }
  }
end

rule "Set a timer to turn off the switch after it was programatically turned on"
when
 Member of gWallSwitch changed
then
  synchronized(switchLock) {

    val timerItemName = triggeringItem.name + "_Timer"

    // Some light might stay on until manually turned off, so this value could
    // be null.
    val timerItem = gWallSwitchTimer.members.findFirst[ t | t.name == timerItemName ]

    if ( isSwitchOn.apply(triggeringItem) ) { 
      // When in vacation mode, the lights be turned on/off randomly to
      // simulate presence (thief prevention). The simulation rule has full
      // control of the lights; thus we don't want to enable the timer.
      val isFanItem = triggeringItem.getGroupNames().contains(gFanSwitch.name)
      if ( ON != VT_In_Vacation.state || isFanItem ) {
        if ( null !== timerItem ) {
          timerItem.sendCommand(ON)
        }

        val stringItemName = triggeringItem.name + "_TurnOffOtherLight"
        val stringItem = gTurnOffOtherLight.members.findFirst[ t | t.name == stringItemName ]
        if ( null !== stringItem ) {
          var switchItem = gLightSwitch.members.findFirst[ 
            t | t.name == stringItem.state.toString
          ]
          if ( null !== switchItem ) {
            switchItem.sendCommand(OFF)
          }
        }
      }
    }
    else {
      if ( null !== timerItem && ON == timerItem.state ) {
        timerItem.sendCommand(OFF)
      }

      lastOffTimes.put(triggeringItem.name, now.getMillis())
    }
  }
end

rule "Turn off wall switch when timer expires"
when
  Member of gWallSwitchTimer changed to OFF
then
  synchronized(timerLock) {
    val localIdx = triggeringItem.name.lastIndexOf("_")
    val switchName = triggeringItem.name.substring(0, localIdx)

    // Check if motion sensor state is still on; if yes, renew timer. This
    // take care of the situation where there is constant activity and thus
    // the motion sensor was never shut off --> timer wasn't being renewed.
    val motionSensorName = switchName + "_MotionSensor"
    val motionSensorItem = gWallSwitchMotionSensor.members.findFirst[
      s | s.name == motionSensorName
    ]

    if ( null !== motionSensorItem && ON == motionSensorItem.state ) {
      triggeringItem.sendCommand(ON)
    }
    else {
      val target = gWallSwitch.members.findFirst[ t | t.name == switchName ]
      synchronized(switchLock) {
        if ( isSwitchOn.apply(target) ) { 
          target.sendCommand(OFF)
        }
      }
    }
  }
end
