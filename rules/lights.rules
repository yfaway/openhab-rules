/**
 * Various rules to turn on/off the lights.
 *  - Turn on the foyer light when garage or front door is open.
 *  - For any light that was turned on programatically, automatically turn off
 *    after 5 minutes.
 *  - Cancel turn-off timer if the light was switched off manually.
 * Dependencies: time-of-day.rules for calculationo of day periods.
 */

val LOGGER_NAME = "Lights"
val Object switchLock = new Object()
val Object timerLock = new Object()

rule "Update light states" 
when
  System started 
then
  FF_Foyer_LightSwitch_MotionSensor.sendCommand(OFF)
end

rule "Update light-on time" 
when
  System started or
  Item VT_Time_Of_Day changed
then
  if (VT_Time_Of_Day.state == "EVENING" 
        || VT_Time_Of_Day.state == "NIGHT"
        || VT_Time_Of_Day.state == "BED" ) {
    VT_Time_LightOn.sendCommand(ON)
  }
  else {
    VT_Time_LightOn.sendCommand(OFF)
  }
end

rule "Turn on light when motion sensor triggered"
when
 Member of gWallSwitchMotionSensor changed to ON
then
  if (ON != VT_Time_LightOn.state ) {
    return
  }

  synchronized(switchLock) {
    val localIdx = triggeringItem.name.lastIndexOf("_")
    val switchName = triggeringItem.name.substring(0, localIdx)

    val switchItem = gWallSwitch.members.findFirst[ t | t.name == switchName ]
    if ( null !== switchItem ) {
      if ( ON != switchItem.state ) {
        switchItem.sendCommand(ON)
      }
      else { // renew timer
        val timerName = switchName + "_Timer"
        val timerItem = gWallSwitchTimer.members.findFirst[ t | t.name == timerName ]
        if ( null !== timerItem ) {
          timerItem.sendCommand(ON)
        }
      }
    }
  }
end

rule "Set a timer to turn off the light after it was programatically turned on"
when
 Member of gWallSwitch changed
then
  synchronized(switchLock) {

    val timerItemName = triggeringItem.name + "_Timer"
    val timerItem = gWallSwitchTimer.members.findFirst[ t | t.name == timerItemName ]

    // some light might stay on until manually turned off
    if ( null !== timerItem ) {
      if (triggeringItem.state == ON) {
        timerItem.sendCommand(ON)
      }
      else {
        if ( timerItem.state == ON ) {
          timerItem.sendCommand(OFF)
        }
      }
    }
  }
end

rule "Renew timer if the light receives ON command again"
when
 Member of gWallSwitch received command ON
then
  if (ON == triggeringItem.state) {
    val timerItemName = triggeringItem.name + "_Timer"
    val timerItem = gWallSwitchTimer.members.findFirst[ t | t.name == timerItemName ]

    if ( null !== timerItem )  {
      timerItem.sendCommand(ON)
    }
  }
end


rule "Turn off light when timer expires"
when
  Member of gWallSwitchTimer changed to OFF
then
  synchronized(timerLock) {
    val localIdx = triggeringItem.name.lastIndexOf("_")
    val switchName = triggeringItem.name.substring(0, localIdx)

    val target = gWallSwitch.members.findFirst[ t | t.name == switchName ]
    if ( target.state == ON ) {
      target.sendCommand(OFF)
    }
  }
end
