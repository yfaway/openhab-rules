/**
 * Various rules to turn on/off the lights.
 */

val LOGGER_NAME = "Lights"

rule "Turn on foyer light if the front door or garage door is opened"
when
  Item FF_FrontDoor_Tripped changed to ON or
  Item FF_GarageDoor_Tripped changed to ON
then
  val sunsetJodaTime = new DateTime((VT_Sunset_Time.state as DateTimeType).calendar.timeInMillis)
  if ( now.isAfter(sunsetJodaTime) ) {
    FF_Foyer_Switch.sendCommand(ON)
  }
end

rule "Set a timer to turn off the light after it was programatically turned on"
when
 Item gLightSwitch changed
then
  gLightSwitch.members.forEach[light |
    val timerItemName = light.name + "_Timer"
    val target = gLightSwitchTimer.members.findFirst[t | t.name == timerItemName]

    if (light.state == ON) {
      // prevent renewing the timer caused by other light's state changed to ON
      if ( target.state != ON ) {
        target.sendCommand(ON)
          //logInfo(LOGGER_NAME, "Set timer.")
      }
    }
    else {
      if ( target.state != OFF ) {
        target.sendCommand(OFF)
          //logInfo(LOGGER_NAME, "Cancel timer.")
      }
    }
  ]
end

rule "Turn off light when timer expires"
when
 Item gLightSwitchTimer changed
then
  gLightSwitchTimer.members.forEach[timer |
    if (timer.state == OFF) {
      val localIdx = timer.name.lastIndexOf("_")
      val switchName = timer.name.substring(0, localIdx)
      //logInfo(LOGGER_NAME, "name: " + switchName)

      val target = gLightSwitch.members.findFirst[t | t.name == switchName]
      if ( target.state == ON ) {
        target.sendCommand(OFF)
          //logInfo(LOGGER_NAME, "Turned off light.")
      }
    }
  ]
end
